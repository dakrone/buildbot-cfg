# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

c = BuildmasterConfig = {}

# ###### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("linux-slave",
                                     "REPLACE_ME_WITH_YOUR_SLAVE_PASSWORD")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your
# master with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

# ###### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

branches = ["master", "1.x", "1.5"]

c['change_source'].append(changes.GitPoller(
    'git://github.com/elastic/elasticsearch.git',
    workdir='gitpoller-workdir', branches=branches,
    pollinterval=300))

# ###### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case, just kick off a 'runtests' build

c['schedulers'] = []

changesMaster = schedulers.SingleBranchScheduler(
    name="master scheduler",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=60,
    builderNames=["runtests"])

changes1x = schedulers.SingleBranchScheduler(
    name="1.x scheduler",
    change_filter=util.ChangeFilter(branch='1.x'),
    treeStableTimer=60,
    builderNames=["runtests"])

changes15 = schedulers.SingleBranchScheduler(
    name="1.5 scheduler",
    change_filter=util.ChangeFilter(branch='1.5'),
    treeStableTimer=60,
    builderNames=["runtests"])

forceScheduler = schedulers.ForceScheduler(
    name="force", builderNames=["runtests"])

tryScheduler = schedulers.Try_Userpass(
    name='try',
    builderNames=['runtests'],
    port=5555,
    userpass=[('try', 'YOUR_PASSWORD_FOR_TRY_HERE')])

c['schedulers'].append(changesMaster)
c['schedulers'].append(changes1x)
c['schedulers'].append(changes15)
c['schedulers'].append(forceScheduler)
c['schedulers'].append(tryScheduler)

# ###### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which slaves can execute them. Note that any
# particular build will only take place on one slave.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git://github.com/elastic/elasticsearch.git',
                          mode='incremental'))
# clean the repository and compile
factory.addStep(steps.ShellCommand(command=["mvn", "clean"]))
# complie and test-compile
factory.addStep(steps.ShellCommand(command=["mvn", "compile", "test-compile"]))
# run the tests with maven
factory.addStep(steps.ShellCommand(command=["mvn", "test", "-Dtests.slow=true"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
                       slavenames=["linux-slave"],
                       factory=factory))

# ###### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg = authz.Authz(
    auth=auth.BasicAuth([("lee", "YOUR_BUILD_BOT_PASSWORD_HERE")]),
    gracefulShutdown=True,
    forceBuild='auth',  # use this to test your slave once it is set up
    forceAllBuilds='auth',  # ..or this
    pingBuilder=True,
    stopBuild=True,
    stopAllBuilds=True,
    cancelPendingBuild=True
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# ###### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Lee's buildbot"
c['titleURL'] = "http://writequit.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

# ###### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite"
}
